#require 'neo4j-core'
require 'neo4j'
require 'securerandom'

session = Neo4j::Session.open(:server_db, "http://localhost:7474", { basic_auth: { username: 'neo4j', password: 'y2puv8VrUCHtAf'} })


class DateNode
  include Neo4j::ActiveNode
  property :name

  id_property :uuid, auto: :uuid

  has_many :in, :artefact, type: :AT_DATETIME, model_class: :Artefact

  property :normalized_name

  validates_presence_of :name
  validate :set_normalized_name

  private

  def set_normalized_name
    self.normalized_name = self.name.downcase if self.name
  end
end

class Decade < DateNode
  property :decade
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Year
end

class Year < DateNode
  property :year

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Decade
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Month
end

class Quarter < DateNode
  property :quarter, type: Integer
  # 1, 2, 3, 4 = Q1, Q2, Q3, Q4

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Year
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Month
end

class Season < DateNode
  property :season, type: String

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Year
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Month
end

class Month < DateNode
  property :month

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Year
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Month
end

class Day < DateNode
  property :day

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Year
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Day
end

class Hour < DateNode
  property :hour

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Month
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Minute
end

class Minute < DateNode
  property :minute

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Hour
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Second
end

class Second < DateNode
  property :second
  property :unixtime, type: DateTime

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Minute
  has_many :in, :datetimeChild, type: :DATETIMECHILD, model_class: :Millisecond
end

class Millisecond < DateNode #Note: We are only considering ms for events since 1800, which makes a minimum of -5,364,648,000,000ms (5364648000000  2147483648)
  property :millisecond
  property :unixtime_millisecond

  has_one :out, :datetimeParent, type: :DATETIMEPARENT, model_class: :Minute
end



class Artefact
  include Neo4j::ActiveNode
  property :name
  property :content

  id_property :uuid, auto: :uuid

  property :updated_at
  property :created_at

  property :normalized_name

  validates_presence_of :name
  validate :set_normalized_name

  private

  def set_normalized_name
    self.normalized_name = self.name.downcase if self.name
  end
end

# Agent (aka person, organization, etc: something which can affect change)
  # Name
  # Description
  # has_many: artefacts
  # has_many: 


# Artefact (aka: media, story, object)
  # Name
  # created_at
  # has_many: Agent 

# Time tree (on-demand, hopefully)

  # Provided by graphaware-neo4j-timetree
  # Year
  # Month
  # Day
  # Hour
  # Minute
  # Second
  # Millisecond


  # Suggested by Iian
    # Proximity: String; # Used to capture things like whether the event happened around a certain time, before, after, etc.
      # Values: "c", "<", ">", "<=", ">="

    # Milennia: String;
      # Values: "AD", "BC"

    # IsDecade: Boolean;
      # TRUE indicates that the event happened sometime in that decade. E.g., if you only knew that something happened in the 1490s then 'IsDecade' would be TRUE and 'Year' would be 1490.

    # Month: Nullable<Int>;
      # Values 1 to 12 represents calendar months,
      # values 13 to 16 represent the seasons, 
      # and values 17 and 18 represent 'Early' and 'Late'.
      # What this means is that you can record that an event took place in 'Summer, 1490' or that it occurred 'Late 1494' or even 'Late 1520s', if 'IsDecade' is TRUE.

    # In retrospect I should probably have split the early/late off into its own boolean flag, so you could say things like 'Late Autumn 1464'.

    # The season and lateness values may seem like overkill but I came across a surprising number of art history events that couldn't be dated any more precisely than that.

    # In addition, each event also has another optional HistoricalDate value representing the end of a date range. For example, lots of art works are dated like '1503-1505' meaning that it was made sometime between 1503 and 1505.


  # Suggested by me, modified from Iian:

     # Proximity: String; # Used to capture things like whether the event happened around a certain time, before, after, etc.
        # Values: "c", "<", ">", "<=", ">="

    # [:RANGE_BEGIN] and [:RANGE_END] Allows a node's time to be within a range of decade/day/ms/etc
      # When both connect to the same node, [:RANGE_BEGIN] is assumed as the beginning of the node, and [:RANGE_END] is assumed as the end
        # Example: (n1:event)-[:RANGE_BEGIN]->(1490) and (n1)-[:RANGE_END]-(1490) means between 1490-01-01 and 1490-12-31
    
    # Season -> Late/mid/early
      # Does not define a date range as this is subjective and can vary wildly for each year at each location for each person 
    
    # Quarter: Specific date ranges by month
      # Q1: January, February and March
      # Q2: April, May and June
      # Q3: July, August and September
      # Q4: October, November and December



class Agent
  include Neo4j::ActiveNode
#  property :uuid
  property :username
  property :name
  property :desc
  property :scent
  property :sound
  property :taste
  property :alias
  property :homeRoom
#  property :touch #reserved word

  property :updated_at

  property :details

  property :normalized_name
  validates_presence_of :name
  validate :set_normalized_name

  private

  def set_normalized_name
    self.normalized_name = self.name.downcase if self.name
  end

  has_one :in, :room, type: :CONTAINS
  has_many :out, :held, type: :HOLDING, model_class: :Thing

end



def reload()
  load("./version5.rb")
end

def r()
  load("./version5.rb")
end

def look()
  player = Person.find_by(username: 'morty')
  #puts player.name
  #puts player.desc

#  puts "#{player.room[:name].tr!('_', ' ')} (#{player.room[:uuid][0,10]})" #If we move to room names with underscores instead of spaces
  puts "#{player.room[:name]} (#{player.room[:uuid][0,10]})"
  puts player.room[:desc]
#  puts player.uuid

  puts "\nContents:"
  player.room.thing.each do |thing|
    if thing.name != "morty"
      puts "#{thing[:name]}"
    end
  end
  # player.room.person.each do |person|
  #   if person.name != "morty"
  #     puts "#{person[:name]}"
  #   end
  # end

  puts "\nObvious Exits:"
  player.room.door.each do |door|
    print "#{door[:name]}  "
  end
  puts ""
end

def l()
  look()
end

def e(string)
  examine(string)
end

def examine(string)
  # This should be refactored so that examine simply
  # shows all properties and thier names
  # without having to manually parse them
  # [x] Done


  player = Person.find_by(username: 'morty')

  if examinedThing = player.room.thing.find_by(normalized_name: string.downcase) # Search starting with things in the room
    displayAttributes(examinedThing)
  elsif examinedThing = player.held.find_by(name: string) # Move to inventory
    displayAttributes(examinedThing)
  elsif examinedPlayer = player.room.person.find_by(normalized_name: string.downcase) # Move on to players in the room
    displayAttributes(examinedPlayer)
  elsif examinedDoor = player.room.door.find_by(name: string) # Now check if player is looking at a door
    displayAttributes(examinedDoor)
  else
    puts "I don't see that here."
  end
end


def lookat(string)
  player = Person.find_by(username: 'morty')
  if thing = player.room.thing.find_by(normalized_name: string.downcase)
    puts thing[:desc]
  elsif otherPlayer = player.room.person.find_by(normalized_name: string.downcase)
    puts otherPlayer[:desc]
  elsif door = player.room.door.find_by(normalized_name: string.downcase)
    puts otherPlayer[:desc]
  else
    puts "I don't see that here."
  end
end


def displayAttributes(object)
  puts "#{object[:name]} (#{object[:uuid]})"
#  puts thing[:desc]
  object.attributes.each do |attribute|
    if attribute[1] #If the attribute is set, show it. Otherwise don't.
      puts "#{object[:name]}.#{attribute[0]} = \"#{attribute[1]}\""
    end
  end
  puts "Owned by object[:owner]"
end

def go(doorName)
  gotoexit(doorName)
end

def gotoexit(doorName)
  player = Person.find_by(username: 'morty')
  if potentialExit = player.room.door.find_by(name: doorName)
    #puts "Door found: #{potentialExit}"
    if potentialRoomUUID = potentialExit.roomTo.uuid #get the UUID of where we're going

    # moveRoomsQuery is an ugly hack, but it works. THis should definitely change to the ActiveNode way of doing things
    moveRoomsQuery = "
      MATCH (a:Person { name:'morty' })<-[r:CONTAINS]-(b), (c:Room {uuid: '#{potentialRoomUUID}'})
      MERGE (a)<-[r2:CONTAINS]-(c)
      ON CREATE SET r2 += r
      DELETE r
      return r2
    "
    session = Neo4j::Session.open(:server_db, "http://localhost:7474", { basic_auth: { username: 'neo4j', password: 'y2puv8VrUCHtAf'} })
    session.query(moveRoomsQuery)

    look()
    end
# This is the cypher query that moves a player:
# MATCH (a:Person  { name:'morty' })<-[r:CONTAINS]-(b), (c:Room {uuid: '61bb3f21-c513-11e5-951c-0800274d3a1f'})
# MERGE (a)<-[r2:CONTAINS]-(c)
# ON CREATE SET r2 += r // This copies all relationship properties to r2
# DELETE r
# return r2
  else
      puts "Could not find the exit you specified."
  end
# Conversion to ActiveNode:

end

def create(name, description)
  player = Person.find_by(username: 'morty')
  object = Thing.new
  object.name = name
  object.desc = description
  player.room.thing << object
end


def createHourNode(datetime)

  if datetime.type = 
  hournode = Hour.create()
  hournode.name = "2015-02-16T1700"
  hournode.save

  return hournode
end


def createNowNode()
  thissecond = Second.create
  
  timenow = Time.now
  thissecond.unixtime = timenow
  thissecond.second = timenow.strftime "%Y%m%d_%H%M%S%z"
  thissecond.name = thissecond.second
  thissecond.save
end

def populateObjects()

# Create the date tree (manually for now)

dateNodeRoot = DateNode.create
dateNodeRoot.name = "dateNodeRoot"
dateNodeRoot.save

hournode = Hour.create()
hournode.name = "2015-02-16T1700"
hournode.save

# Create 2 "document" artefacts of one sentence each

# Create 2 "Audiosegment" artefacts (1: 1 day ago, 2: 1 day ago + 7 seconds)
# # Add "Path" as "http://host.ca/artefact/uuid"
# # Include the metadata from the previous file splitting tool

# # Create an "Audio_segment" artefact that links to both previous segments and is named with the origional filename

# # Create 3 notes that link to a single artefact
# # Each links to [:CREATED_AT] (1: Now - 1 hour, 2: Now - 14min, 3: Now)
# # The first links again via [:EDITED_AT] (Now)

# # 

############################ for the writing app:
# # WITH count(*) as dummy
# jazzLounge = Room.new
# jazzLounge.name = "Jazz Lounge"
# jazzLounge.desc = "A warmly lit lounge with plush chairs pushed arm to arm. The stage is empty, and a mic stands as though waiting for destiny."
# jazzLounge.save

# northSide = Room.new
# northSide.name = "North side of town"
# northSide.desc = "You look out in the direction of the horizon, but all you see is gleaming buildings."
# northSide.save

# doorToOutside = Door.new #Door in the Jazz Club
# doorToOutside.name = "Out"
# doorToOutside.save
# doorToOutside.room = jazzLounge
# doorToOutside.roomTo = northSide

# doorBack = Door.new #Door in North Side
# doorBack.name = "Jazz"
# doorBack.desc = "The door to the Jazz Club"
# doorBack.save
# doorBack.room = northSide
# doorBack.roomTo = jazzLounge


# #   // Create morty
# # CREATE (n:Person {name:"morty", username:"morty", desc:"Warm and fuzzy", wearing:"A conical hat"})
# # //RETURN n.uuid

# # //MATCH (a:Person {name:"morty", username:"morty", desc:"Warm and fuzzy", wearing:"A conical hat"})
# # //CREATE UNIQUE (a)<-[:CONTAINS]-(leaf { name:'D' })
# # //RETURN a

# player = Person.new
# player.name = "morty"
# player.desc = "Meek"
# player.username = "morty"
# # player.Ofail = 'trys to take Morty.. They want me /that/ bad.'
# # player.Okill = 'HaH HaH HaH! I am god! You think you can kill me????.... Hey... no fair...'
# # player.Ause = 'thi [v(n)] tried to use me'
# # player.Ahear = 'thi v[n] listened to me!'
# player.alias = 'friend'
# # player.use = 'There is no socially acceptable way to use that.'
# # player.Ouse = 'tried to use Morty'
# # player.listen2 = '*poke*Morty*'
# # player.Ahear2 = ':hath been poked and emits a customary "Eek!"'
# # player.listen4 = '*foof*'
# # player.Ahear4 = '"Woohoo! (It is sort of a yayish thing to say)'
# player.scent = "You gradually feel more energized, content and comforted. Things seem right with the world."
# player.sound = "You hear a profound silence, in the same way that you listen to the silence at the end of a drumming performance, and appreciate this very Zen experience."
# player.taste = "You taste what seems to be [wrand(tastes())]."
# # player.touch = "Neither words nor actions can articulate what is felt at the heart of it all."
# # player.Otouch = 'touched Morty.'
# # player.Atouch = 'thi %n touched me'
# # player.Functions = '#44140 #69 #61865 #200 #26066 #57679 #71748 #11788 #67 #4303 #44859 #68 #4040 #78157'
# # player.XH = ['Desc', "I'm tired of being god... *sigh*"]
# # player.XQ = ['1000p', 'herb-master']
# # player.XZ = ['tastes', 'strawberry_icing_sugar the_heart_of_a_Lindt_Lindor_that_is_melting_on_the_skin_of_a_lover sweet_apple_crumble,_fresh_from_the_oven']
# # player.VA = 'Infobation (v): mental masturbation, with information as the stimulant... Like a university teacher that feels pleasure at being more knowledgable about things than others, or the newbie hacker that gets off on breaking into a datastore'
# # player.Hspeech = 'Sitting comfortably on Morty,'
# # player.haven = "I'm hiding! Can't find me!"
# player.details = "Subtitle of the description?"
# player.homeRoom = jazzLounge.uuid
# player.save
# player.room = jazzLounge

# # # WITH count(*) as dummy

# table = Thing.new
# table.name = "Table"
# table.desc = "A large balsawood table. Do not place items on the table. It weighs 5 grams."
# table.save
# table.room = jazzLounge

# burritos = Thing.new
# burritos.name = "Burritos"
# burritos.desc = "a soft-shelled taco, but in a cylander. It tastes good"
# burritos.save
# burritos.room = jazzLounge

# tacos = Thing.new
# tacos.name = "Tacos"
# tacos.desc = "cook some meat, you add in some lettuce, LOTS of sour cream (LOTS and LOTS and LOTS and LOTS. You add in some tomatoes, some meat. You take a shell and then you put everything in it. Yipee! It tastes good!"
# tacos.save
# tacos.room = jazzLounge

# gingerale = Thing.new
# gingerale.name = "Gingerale"
# gingerale.desc = "Fizzy. Tastes good. I drink it 24/7"
# gingerale.save
# gingerale.room = jazzLounge

# emojis = Thing.new
# emojis.name = "Emojis"
# emojis.desc = "👀"
# emojis.save
# emojis.room = jazzLounge

# popcicle = Thing.new
# popcicle.name = "Mint Icecream Popcicle"
# popcicle.desc = ""
# popcicle.save
# popcicle.room = jazzLounge

# kittens = Thing.new
# kittens.name = "kittens"
# kittens.desc = "fuzzy fluffy kittens playing on the floor"
# kittens.save
# kittens.room = jazzLounge

# spaghetti = Thing.new
# spaghetti.name = "Spaghetti and Meatballs"
# spaghetti.desc = "tastes like meat and deadness"
# spaghetti.save
# spaghetti.room = jazzLounge


# rainbow = Thing.new
# rainbow.name = "Rainbow"
# rainbow.desc = "A floating thing in the sky with colours"
# rainbow.save
# rainbow.room = jazzLounge

# ketchup = Thing.new
# ketchup.name = "ketchup"
# ketchup.desc = ""
# ketchup.save
# ketchup.room = jazzLounge

# # # WITH count(*) as dummy

# # MATCH (a)
# # WHERE a.name = 'morty'
# # CREATE p =(a)-[:HOLDING]->(n:Thing {name:"Wand", desc:"A thin stick, slightly warped from use."})
# # # //RETURN p

# wand = Thing.new
# wand.name = "Wand"
# wand.desc = "A thin stick, slightly warped from use."
# player.held << wand

# MATCH (a)
# WHERE a.name = 'Jazz Lounge'
# CREATE p = (a)-[:CONTAINS]->(n:Door {name:"Out", aliases:["o"], desc:"the way out"})-[:DOOR_TO]->(d:Room {name:"North side of town", desc:"You look out in the direction of the horizon, but all you see is gleaming buildings."})-[:CONTAINS]->(n2:Door {name:"Jazz Club", aliases:["jazz", "club"], desc:"The door to the Jazz Club"})-[:DOOR_TO]->(a)
# # //RETURN p

# WITH count(*) as dummy

# # // Jazz lounge is contained by the North Side of Town, which is contained in New Orleans, with is contained in Louisiana < United States < North America < Earth < Solar system < Galactic Cluster < Universe
# MATCH (a)
# WHERE a.name = 'North side of town'
# MERGE (q:Room {name:"Universe", desc:"This is the Universe. It's big. Get over it."})-[:CONTAINS]->(db:Door {name:"Earth's Local Galactic Group", aliases:["galactic", "zoom", "narrow", "local group"], desc: ""})-[:DOOR_TO]->(o:Room {name:"Earth's Local Galactic Group", desc:""})-[:CONTAINS]->(da:Door {name:"Milky Way Galaxy", aliases:["galaxy", "zoom", "narrow"], desc: ""})-[:DOOR_TO]->(n:Room {name:"Milky Way Galaxy", desc:""})-[:CONTAINS]->(dc:Door {name:"Earth's Local Solar System", aliases:["solar system", "solar", "earth", "zoom", "narrow"], desc: ""})-[:DOOR_TO]->(m:Room {name:"Earth's Local Solar system", desc:""})-[:CONTAINS]->(dd:Door {name:"Earth", aliases:["narrow"], desc: ""})-[:DOOR_TO]->(l:Room {name:"Earth", desc:""})-[:CONTAINS]->(de:Door {name:"North America", aliases:["NA"], desc: ""})-[:DOOR_TO]->(k:Room {name:"North America", desc:""})-[:CONTAINS]->(df:Door {name:"United States", aliases:["USA"], desc: ""})-[:DOOR_TO]->(d:Room {name:"United States", desc:""})-[:CONTAINS]->(dg:Door {name:"Louisiana", aliases:[], desc: ""})-[:DOOR_TO]->(e:Room {name:"Louisiana", desc:""})-[:CONTAINS]->(dh:Door {name:"New Orleans", aliases:[], desc: ""})-[:DOOR_TO]->(f:Room {name:"New Orleans", desc:"The city of New Orleans"})-[:CONTAINS]->(di:Door {name:"The North side of town", aliases:["north side", "north"], desc: ""})-[:DOOR_TO]->(a)
# MERGE (a)-[:CONTAINS]->(oa:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(f)-[:CONTAINS]->(ob:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(e)-[:CONTAINS]->(oc:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(d)-[:CONTAINS]->(od:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(k)-[:CONTAINS]->(oe:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(l)-[:CONTAINS]->(of:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(m)-[:CONTAINS]->(og:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(n)-[:CONTAINS]->(oh:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(o)-[:CONTAINS]->(oi:Door {name:"Out", aliases:["Broaden"], desc: ""})-[:DOOR_TO]->(q)
# # // (:Door {name:"", aliases:[], desc: ""})-[:DOOR_TO]->(:Room {name:"", desc: ""})-[:CONTAINS]->(:Door {name:"", aliases:[], desc: ""})-[:DOOR_TO]->(:Room)
# # // -[:CONTAINS]->(:Door {name:"", aliases:[], desc: ""})-[:DOOR_TO]->
# WITH count(*) as dummy

# MATCH (a), (b)
# WHERE a.name = 'Jazz Lounge' AND b.name = 'morty'
# CREATE UNIQUE (a)-[r:CONTAINS]->(b)
# # //RETURN r
# WITH count(*) as dummy



# WITH count(*) as dummy





# MATCH (n { name: 'morty' })


# SET n.Ofail = 'trys to take Morty.. They want me /that/ bad.'
# SET n.Okill = 'HaH HaH HaH! I am god! You think you can kill me????.... Hey... no fair...'
# SET n.Ause = 'thi [v(n)] tried to use me'
# SET n.Ahear = 'thi v[n] listened to me!'
# SET n.Alias = 'friend'
# SET n.use = 'There is no socially acceptable way to use that.'
# SET n.Ouse = 'tried to use Morty'
# SET n.listen2 = '*poke*Morty*'
# SET n.Ahear2 = ':hath been poked and emits a customary "Eek!"'
# SET n.listen4 = '*foof*'
# SET n.Ahear4 = '"Woohoo! (It is sort of a yayish thing to say)'
# SET n.scent = "You bring your nose close to Morty's body and inhale deeply. The light scents of a cool breeze on a warm summer night in New Orleans, a salivating hand made home-baked meal finishing on the stove, a lightning strike in a light drizzle, unspoiled forest earth, and a subtle variety of herbs permeate your being. You gradually feel more energized, content and comforted. Things seem right with the world."
# SET n.sound = "You hear a profound silence, in the same way that you listen to the silence at the end of a Taiko drumming performance, and appreciate this very Zen experience."
# SET n.taste = "You take a big lick somewhere on my body (I will let you decide where), and taste what seems to be [wrand(tastes())]."
# SET n.touch = "You feel the depths of my soul as though I had the power to let you in. Neither words nor actions can articulate what is felt at the heart of it all."
# SET n.Otouch = 'touched Morty.'
# SET n.Atouch = 'thi %n touched me'
# SET n.Functions = '#44140 #69 #61865 #200 #26066 #57679 #71748 #11788 #67 #4303 #44859 #68 #4040 #78157'
# SET n.XQ = ['1000p', 'herb-master']
# SET n.XX = ['Keys', 'Admin Key: #70392. Friend Key: #70153. Guest Key: 70262.']
# SET n.XZ = ['tastes', 'strawberry_icing_sugar the_heart_of_a_Lindt_Lindor_that_is_melting_on_the_skin_of_a_lover sweet_apple_crumble,_fresh_from_the_oven']
# SET n.VA = 'Infobation (v): mental masturbation, with information as the stimulant... Like a university teacher that feels pleasure at being more knowledgable about things than others, or the newbie hacker that gets off on breaking into a datastore'
# SET n.Hspeech = 'Sitting comfortably on Morty,'
# SET n.haven = "I'm hiding! Can't find me!"
# SET n.details = "Friend (n); One who can be trusted and is attached to another by affection or esteem"

# //RETURN n
# WITH count(*) as dummy

# MATCH (n) RETURN n LIMIT 100


# // Create a door out of the jazz lounge
# // CREATE (n {name:"North", aliases:["n","north"], desc:"the way out"})
# // RETURN n

# // Create the door link
# // MATCH (a),(b)
# // WHERE a.name = 'North' AND b.name = 'Jazz Lounge'
# // CREATE (b)-[r:CONTAINS]->(a)
# // RETURN r

# // Create the doorway room
# //CREATE (n {name:"doorway", desc:"just for coding purposes"}) RETURN n

# //MATCH (a),(b),(c)
# //WHERE a.name = 'North' AND b.name = 'South' AND c.name = 'doorway'
# //CREATE (b)-[r:CONNECTED]->(c)<-[r2:CONNECTED]-(a)
# //RETURN r, r2

end
